x-depends_on: &default-depends_on
  "db":
    condition: service_healthy
  "elastic":
    condition: service_healthy
  "mail":
    condition: service_started

services:
  application:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: -- true
    env_file: .env
    depends_on:
      "web":
        condition: service_started
      "consumer":
        condition: service_started
      "cron":
        condition: service_started

  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: nginx
    env_file: .env
    ports:
      - target: 80
        published: 80
        mode: host
    depends_on:
      "php-fpm-app":
        condition: service_healthy
      "ws":
        condition: service_started
    networks:
      default:
        aliases:
          - ${ORO_APP_DOMAIN}
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data
      - etc_nginx:/etc/nginx

  php-fpm-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: php-fpm
    env_file: .env
    healthcheck:
      test: "php-fpm-healthcheck"
      interval: 5s
      timeout: 30s
      start_period: 120s
    depends_on:
      <<: *default-depends_on
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data
      - run_php_fpm:/run/php-fpm

  ws:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: console gos:websocket:server -v
    env_file: .env
    user: $ORO_USER_RUNTIME
    init: true
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: console oro:message-queue:consume --memory-limit=500 -v
    env_file: .env
    user: $ORO_USER_RUNTIME
    init: true
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data

  cron:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: cron
    env_file: .env
    user: ${ORO_USER_RUNTIME:-www-data}
    ulimits:
      nofile:
        soft: 1024
        hard: 1048576
    depends_on:
      "php-fpm-app":
        condition: service_healthy
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data

  install:
    build:
      context: .
      dockerfile: Dockerfile
      target: oro_dev
      args:
        UID: ${UID}
        GID: ${GID}
    command: console oro:install --no-interaction --timeout=3600 --user-name="$ORO_USER_NAME" --user-email="$ORO_USER_EMAIL" --user-firstname="$ORO_USER_FIRSTNAME" --user-lastname="$ORO_USER_LASTNAME" --user-password="$ORO_USER_PASSWORD" --sample-data="$ORO_SAMPLE_DATA" --organization-name="$ORO_ORGANIZATION_NAME" --language=$ORO_LANGUAGE --formatting-code=$ORO_FORMATTING_CODE --application-url="$ORO_APP_PROTOCOL://$ORO_APP_DOMAIN" $ORO_INSTALL_OPTIONS
    user: $ORO_USER_RUNTIME
    env_file: .env
    depends_on:
      <<: *default-depends_on
    volumes:
      - ./src:/var/www/oro
      - private_storage:/var/www/oro/var/data

  restore: &restore
    image: ${ORO_IMAGE_INIT}${ORO_LANGUAGE_SUFFIX-}:$ORO_IMAGE_TAG
    command: restore
    user: $ORO_USER_RUNTIME
    env_file: .env
    depends_on:
      <<: *default-depends_on
    volumes:
      - cache:/var/www/oro/var/cache
      - public_storage:/var/www/oro/public/media
      - private_storage:/var/www/oro/var/data

  db:
    image: docker.io/oroinc/pgsql:${ORO_PG_VER}
    labels:
      com.symfony.server.service-prefix: ORO_DB
    environment:
      POSTGRES_ROOT_PASSWORD: ${ORO_DB_ROOT_PASSWORD}
      POSTGRES_DB: ${ORO_DB_NAME}
      POSTGRES_USER: ${ORO_DB_USER}
      POSTGRES_PASSWORD: ${ORO_DB_PASSWORD}
    healthcheck:
      test: "pg_isready -U$${POSTGRES_USER} -d$${POSTGRES_DB}"
      start_period: 60s
    volumes:
      - db_data:/var/lib/postgresql/data

  elastic:
    image: elasticsearch:8.15.2
    environment:
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 512 Mo HEAP
      - cluster.routing.allocation.disk.threshold_enabled=false # Avoid ES going read-only because low disk space availability
      - xpack.security.enabled=false # disable ssl security
      - action.destructive_requires_name=false #Allow to delete indices with wildcard
    volumes:
      - es_data8:/usr/share/elasticsearch/data:rw,z
    healthcheck:
      test: test $$(curl -k --write-out %{http_code} --fail --silent --output /dev/null http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s) -eq 200
      interval: 10s
      timeout: 5s
      retries: 20
    ports:
      - target: 9200
        published: 9203
        mode: host

  mail:
    image: mailhog/mailhog
    hostname: mail
    environment:
      MH_UI_WEB_PATH: mailcatcher
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /home/mailhog/maildir

volumes:
  private_storage: {}
  etc_nginx: {}
  run_php_fpm: {}
  es_data8: {}
  db_data: {}
  cache: {}
  public_storage: {}
